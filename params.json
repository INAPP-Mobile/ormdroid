{"name":"Ormdroid","tagline":"ORMDroid is a simple ORM persistence framework for your Android applications.","body":"ORMDroid is a simple ORM persistence framework for your Android applications, providing an easy to use, almost-zero-config way to handle model persistence without ever having to deal with Android's built-in database interfaces.\r\n\r\nORMDroid is:\r\n\r\n* *Small* - ~20k, target of no more than 30k.\r\n* *Simple* - No excessive features or support for platforms other than Android.\r\n* *Flexible* - Allowing you to configure what you need to, but at the same time...\r\n* *Automatic* - ... sensible defaults for everything.\r\n\r\nORMDroid works with Android API 8 and up.\r\n\r\nGetting ORMDroid\r\n----------------\r\n\r\nYou can either download ORMDroid from [the download page](http://code.google.com/p/orm-droid/downloads/list), or check out of Git.\r\n\r\nIf downloading a packaged release, you'll need to unzip the file somewhere, and then import the project into your Eclipse. \r\n\r\nGetting started\r\n---------------\r\n\r\nTo use ORMDroid, you need to set up ORMDroid as a required library in your android app. If you're using Eclipse, go to _project->properties->android_ and add ORMDroid as a required libray. Now, you just need to add a single XML tag to your `AndroidManifest.xml` as a child of the `Application` tag:  \r\n\r\n```xml\r\n<meta-data\r\n  android:name=\"ormdroid.database.name\"\r\n  android:value=\"your_database_name\" />\r\n```\r\n\r\nAnd initialize the framework somewhere (e.g. Application.onCreate, or even in your activity's onCreate since there's no penalty for calling initialize multiple times):\r\n\r\n```java\r\nORMDroidApplication.initialize(someContext);\r\n```\r\n\r\nThen you create your model:\r\n\r\n```java\r\npublic class Person extends Entity {\r\n  public int id;\r\n  public String name;\r\n  public String telephone;\r\n}\r\n```\r\n\r\nAnd work with it as you see fit!\r\n\r\n```java\r\nPerson p = Entity.query(Person.class).where(\"id=1\").execute();\r\np.telephone = \"555-1234\";\r\np.save();\r\n```\r\n\r\nThere is also an object-oriented query API:\r\n\r\n```java\r\nimport static com.roscopeco.ormdroid.Query.eql;\r\n\r\n// ... later\r\n\r\nPerson person = Entity.query(Person.class).where(eql(\"id\", id)).execute();\r\np.telephone = \"555-1234\";\r\np.save();\r\n```      \r\n\r\nThat's it! If you want more customization over e.g. table names, column names, etc, take a look at the `Table` and `Column` annotations.\r\n\r\nThere is a more detailed version of these instructions in [this blog entry](http://roscopeco.wordpress.com/2012/08/05/ormdroid-on-google-code/)\r\n\r\n*Update*: There is now a very simple sample app available for ORMDroid. You can get it from Git:\r\n\r\n```\r\ngit clone https://github.com/roscopeco/ormdroid-example.git\r\n```\r\n\r\nFor more information, check out [this blog entry](http://roscopeco.com/2012/08/23/ormdroid-bugfixes-sample-app-happiness/).\r\n\r\nGet in touch!\r\n-------------\r\n\r\nIf you have questions, suggestions or just want to talk (about ORMDroid), get in touch via the [Google Group](https://groups.google.com/forum/#!forum/ormdroid-discuss).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}